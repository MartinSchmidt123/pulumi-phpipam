// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Address extends pulumi.CustomResource {
    /**
     * Get an existing Address resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AddressState, opts?: pulumi.CustomResourceOptions): Address {
        return new Address(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'phpipam:index/address:Address';

    /**
     * Returns true if the given object is an instance of Address.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Address {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Address.__pulumiType;
    }

    public /*out*/ readonly addressId!: pulumi.Output<number>;
    public readonly customFields!: pulumi.Output<{[key: string]: any} | undefined>;
    public readonly description!: pulumi.Output<string>;
    public readonly deviceId!: pulumi.Output<number>;
    public /*out*/ readonly editDate!: pulumi.Output<string>;
    public readonly excludePing!: pulumi.Output<boolean>;
    public readonly hostname!: pulumi.Output<string>;
    public readonly ipAddress!: pulumi.Output<string>;
    public readonly isGateway!: pulumi.Output<boolean>;
    public /*out*/ readonly lastSeen!: pulumi.Output<string>;
    public readonly macAddress!: pulumi.Output<string>;
    public readonly note!: pulumi.Output<string>;
    public readonly owner!: pulumi.Output<string>;
    public readonly ptrRecordId!: pulumi.Output<number>;
    public readonly removeDnsOnDelete!: pulumi.Output<boolean | undefined>;
    public readonly skipPtrRecord!: pulumi.Output<boolean>;
    public readonly stateTagId!: pulumi.Output<number>;
    public readonly subnetId!: pulumi.Output<number>;
    public readonly switchPortLabel!: pulumi.Output<string>;

    /**
     * Create a Address resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AddressArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AddressArgs | AddressState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as AddressState | undefined;
            inputs["addressId"] = state ? state.addressId : undefined;
            inputs["customFields"] = state ? state.customFields : undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["deviceId"] = state ? state.deviceId : undefined;
            inputs["editDate"] = state ? state.editDate : undefined;
            inputs["excludePing"] = state ? state.excludePing : undefined;
            inputs["hostname"] = state ? state.hostname : undefined;
            inputs["ipAddress"] = state ? state.ipAddress : undefined;
            inputs["isGateway"] = state ? state.isGateway : undefined;
            inputs["lastSeen"] = state ? state.lastSeen : undefined;
            inputs["macAddress"] = state ? state.macAddress : undefined;
            inputs["note"] = state ? state.note : undefined;
            inputs["owner"] = state ? state.owner : undefined;
            inputs["ptrRecordId"] = state ? state.ptrRecordId : undefined;
            inputs["removeDnsOnDelete"] = state ? state.removeDnsOnDelete : undefined;
            inputs["skipPtrRecord"] = state ? state.skipPtrRecord : undefined;
            inputs["stateTagId"] = state ? state.stateTagId : undefined;
            inputs["subnetId"] = state ? state.subnetId : undefined;
            inputs["switchPortLabel"] = state ? state.switchPortLabel : undefined;
        } else {
            const args = argsOrState as AddressArgs | undefined;
            if (!args || args.ipAddress === undefined) {
                throw new Error("Missing required property 'ipAddress'");
            }
            if (!args || args.subnetId === undefined) {
                throw new Error("Missing required property 'subnetId'");
            }
            inputs["customFields"] = args ? args.customFields : undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["deviceId"] = args ? args.deviceId : undefined;
            inputs["excludePing"] = args ? args.excludePing : undefined;
            inputs["hostname"] = args ? args.hostname : undefined;
            inputs["ipAddress"] = args ? args.ipAddress : undefined;
            inputs["isGateway"] = args ? args.isGateway : undefined;
            inputs["macAddress"] = args ? args.macAddress : undefined;
            inputs["note"] = args ? args.note : undefined;
            inputs["owner"] = args ? args.owner : undefined;
            inputs["ptrRecordId"] = args ? args.ptrRecordId : undefined;
            inputs["removeDnsOnDelete"] = args ? args.removeDnsOnDelete : undefined;
            inputs["skipPtrRecord"] = args ? args.skipPtrRecord : undefined;
            inputs["stateTagId"] = args ? args.stateTagId : undefined;
            inputs["subnetId"] = args ? args.subnetId : undefined;
            inputs["switchPortLabel"] = args ? args.switchPortLabel : undefined;
            inputs["addressId"] = undefined /*out*/;
            inputs["editDate"] = undefined /*out*/;
            inputs["lastSeen"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(Address.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Address resources.
 */
export interface AddressState {
    readonly addressId?: pulumi.Input<number>;
    readonly customFields?: pulumi.Input<{[key: string]: any}>;
    readonly description?: pulumi.Input<string>;
    readonly deviceId?: pulumi.Input<number>;
    readonly editDate?: pulumi.Input<string>;
    readonly excludePing?: pulumi.Input<boolean>;
    readonly hostname?: pulumi.Input<string>;
    readonly ipAddress?: pulumi.Input<string>;
    readonly isGateway?: pulumi.Input<boolean>;
    readonly lastSeen?: pulumi.Input<string>;
    readonly macAddress?: pulumi.Input<string>;
    readonly note?: pulumi.Input<string>;
    readonly owner?: pulumi.Input<string>;
    readonly ptrRecordId?: pulumi.Input<number>;
    readonly removeDnsOnDelete?: pulumi.Input<boolean>;
    readonly skipPtrRecord?: pulumi.Input<boolean>;
    readonly stateTagId?: pulumi.Input<number>;
    readonly subnetId?: pulumi.Input<number>;
    readonly switchPortLabel?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Address resource.
 */
export interface AddressArgs {
    readonly customFields?: pulumi.Input<{[key: string]: any}>;
    readonly description?: pulumi.Input<string>;
    readonly deviceId?: pulumi.Input<number>;
    readonly excludePing?: pulumi.Input<boolean>;
    readonly hostname?: pulumi.Input<string>;
    readonly ipAddress: pulumi.Input<string>;
    readonly isGateway?: pulumi.Input<boolean>;
    readonly macAddress?: pulumi.Input<string>;
    readonly note?: pulumi.Input<string>;
    readonly owner?: pulumi.Input<string>;
    readonly ptrRecordId?: pulumi.Input<number>;
    readonly removeDnsOnDelete?: pulumi.Input<boolean>;
    readonly skipPtrRecord?: pulumi.Input<boolean>;
    readonly stateTagId?: pulumi.Input<number>;
    readonly subnetId: pulumi.Input<number>;
    readonly switchPortLabel?: pulumi.Input<string>;
}
