# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from . import _utilities, _tables

__all__ = [
    'GetAddressesResult',
    'AwaitableGetAddressesResult',
    'get_addresses',
]

@pulumi.output_type
class GetAddressesResult:
    """
    A collection of values returned by getAddresses.
    """
    def __init__(__self__, address_ids=None, custom_field_filter=None, description=None, hostname=None, id=None, subnet_id=None):
        if address_ids and not isinstance(address_ids, list):
            raise TypeError("Expected argument 'address_ids' to be a list")
        pulumi.set(__self__, "address_ids", address_ids)
        if custom_field_filter and not isinstance(custom_field_filter, dict):
            raise TypeError("Expected argument 'custom_field_filter' to be a dict")
        pulumi.set(__self__, "custom_field_filter", custom_field_filter)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if hostname and not isinstance(hostname, str):
            raise TypeError("Expected argument 'hostname' to be a str")
        pulumi.set(__self__, "hostname", hostname)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if subnet_id and not isinstance(subnet_id, int):
            raise TypeError("Expected argument 'subnet_id' to be a int")
        pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter(name="addressIds")
    def address_ids(self) -> Sequence[int]:
        return pulumi.get(self, "address_ids")

    @property
    @pulumi.getter(name="customFieldFilter")
    def custom_field_filter(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "custom_field_filter")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def hostname(self) -> Optional[str]:
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> int:
        return pulumi.get(self, "subnet_id")


class AwaitableGetAddressesResult(GetAddressesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAddressesResult(
            address_ids=self.address_ids,
            custom_field_filter=self.custom_field_filter,
            description=self.description,
            hostname=self.hostname,
            id=self.id,
            subnet_id=self.subnet_id)


def get_addresses(custom_field_filter: Optional[Mapping[str, Any]] = None,
                  description: Optional[str] = None,
                  hostname: Optional[str] = None,
                  subnet_id: Optional[int] = None,
                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAddressesResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['customFieldFilter'] = custom_field_filter
    __args__['description'] = description
    __args__['hostname'] = hostname
    __args__['subnetId'] = subnet_id
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('phpipam:index/getAddresses:getAddresses', __args__, opts=opts, typ=GetAddressesResult).value

    return AwaitableGetAddressesResult(
        address_ids=__ret__.address_ids,
        custom_field_filter=__ret__.custom_field_filter,
        description=__ret__.description,
        hostname=__ret__.hostname,
        id=__ret__.id,
        subnet_id=__ret__.subnet_id)
