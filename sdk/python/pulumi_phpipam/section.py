# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from . import _utilities, _tables

__all__ = ['Section']


class Section(pulumi.CustomResource):
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 display_order: Optional[pulumi.Input[int]] = None,
                 dns_resolver_id: Optional[pulumi.Input[int]] = None,
                 master_section_id: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 show_supernet_only: Optional[pulumi.Input[bool]] = None,
                 show_vlan_in_subnet_listing: Optional[pulumi.Input[bool]] = None,
                 show_vrf_in_subnet_listing: Optional[pulumi.Input[bool]] = None,
                 strict_mode: Optional[pulumi.Input[bool]] = None,
                 subnet_ordering: Optional[pulumi.Input[str]] = None,
                 __props__=None,
                 __name__=None,
                 __opts__=None):
        """
        Create a Section resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['description'] = description
            __props__['display_order'] = display_order
            __props__['dns_resolver_id'] = dns_resolver_id
            __props__['master_section_id'] = master_section_id
            __props__['name'] = name
            __props__['show_supernet_only'] = show_supernet_only
            __props__['show_vlan_in_subnet_listing'] = show_vlan_in_subnet_listing
            __props__['show_vrf_in_subnet_listing'] = show_vrf_in_subnet_listing
            __props__['strict_mode'] = strict_mode
            __props__['subnet_ordering'] = subnet_ordering
            __props__['edit_date'] = None
            __props__['permissions'] = None
            __props__['section_id'] = None
        super(Section, __self__).__init__(
            'phpipam:index/section:Section',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            description: Optional[pulumi.Input[str]] = None,
            display_order: Optional[pulumi.Input[int]] = None,
            dns_resolver_id: Optional[pulumi.Input[int]] = None,
            edit_date: Optional[pulumi.Input[str]] = None,
            master_section_id: Optional[pulumi.Input[int]] = None,
            name: Optional[pulumi.Input[str]] = None,
            permissions: Optional[pulumi.Input[str]] = None,
            section_id: Optional[pulumi.Input[int]] = None,
            show_supernet_only: Optional[pulumi.Input[bool]] = None,
            show_vlan_in_subnet_listing: Optional[pulumi.Input[bool]] = None,
            show_vrf_in_subnet_listing: Optional[pulumi.Input[bool]] = None,
            strict_mode: Optional[pulumi.Input[bool]] = None,
            subnet_ordering: Optional[pulumi.Input[str]] = None) -> 'Section':
        """
        Get an existing Section resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["description"] = description
        __props__["display_order"] = display_order
        __props__["dns_resolver_id"] = dns_resolver_id
        __props__["edit_date"] = edit_date
        __props__["master_section_id"] = master_section_id
        __props__["name"] = name
        __props__["permissions"] = permissions
        __props__["section_id"] = section_id
        __props__["show_supernet_only"] = show_supernet_only
        __props__["show_vlan_in_subnet_listing"] = show_vlan_in_subnet_listing
        __props__["show_vrf_in_subnet_listing"] = show_vrf_in_subnet_listing
        __props__["strict_mode"] = strict_mode
        __props__["subnet_ordering"] = subnet_ordering
        return Section(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayOrder")
    def display_order(self) -> pulumi.Output[int]:
        return pulumi.get(self, "display_order")

    @property
    @pulumi.getter(name="dnsResolverId")
    def dns_resolver_id(self) -> pulumi.Output[int]:
        return pulumi.get(self, "dns_resolver_id")

    @property
    @pulumi.getter(name="editDate")
    def edit_date(self) -> pulumi.Output[str]:
        return pulumi.get(self, "edit_date")

    @property
    @pulumi.getter(name="masterSectionId")
    def master_section_id(self) -> pulumi.Output[int]:
        return pulumi.get(self, "master_section_id")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def permissions(self) -> pulumi.Output[str]:
        return pulumi.get(self, "permissions")

    @property
    @pulumi.getter(name="sectionId")
    def section_id(self) -> pulumi.Output[int]:
        return pulumi.get(self, "section_id")

    @property
    @pulumi.getter(name="showSupernetOnly")
    def show_supernet_only(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "show_supernet_only")

    @property
    @pulumi.getter(name="showVlanInSubnetListing")
    def show_vlan_in_subnet_listing(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "show_vlan_in_subnet_listing")

    @property
    @pulumi.getter(name="showVrfInSubnetListing")
    def show_vrf_in_subnet_listing(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "show_vrf_in_subnet_listing")

    @property
    @pulumi.getter(name="strictMode")
    def strict_mode(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "strict_mode")

    @property
    @pulumi.getter(name="subnetOrdering")
    def subnet_ordering(self) -> pulumi.Output[str]:
        return pulumi.get(self, "subnet_ordering")

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

